# jingk @ 2/24/25

CHECK_OAM_CPLD=0

SECONDS=0
RED='\033[0;31m'
YLW='\033[0;33m'
BLU='\033[0;34m'
GRN='\033[0;32m'
BCY='\033[1;36m'
CYA='\033[0;36m'
NCL='\033[0m' 

ipp=$(ifconfig | grep 'inet ' | grep -v -P '27.0|172.17' | awk '{print $2}')
log=_${ipp}_$(date '+%Y-%m-%d~%H-%M-%S').log
oam="saa -c GetGPUInfo"

mapfile -t line < <( cat node.list )

function saarun(){
	saa -i ${bmcip} -u ADMIN -p ${bmcpw} -c $1 | grep -v SuperServer | grep -v Copyright | grep . | tee -a $log
}

function remote(){
	cmdexec=$(printf "ssh -o \"StrictHostKeyChecking no\" %s \"%s\"\n" ${osipa} "${1}")
	echo $cmdexec
	eval $cmdexec
}

function saa_check(){
	saa -i $1 -u ADMIN -p $2 -c GetGPUInfo
}

function saa_update_ubbcpld(){
	saa -i $1 -u ADMIN -p $2 -c UpdateGpu --item GAUDI_UBB_CPLD --file ubb_primary_cpld_0x13.svf
}

function saa_update_ubbretimer(){
	saa -i $1 -u ADMIN -p $2 -c UpdateGpu --item GAUDI_RETIMER  --file ubb_Retimer_2.12.17.ihx
}

function stats_on(){
	key="$1"
	printf "${BCY}$key${NCL}\n"

	cmdexec=$(printf "grep '%s\.' %s | sed  -r 's/(%s\.+)/-/g' | awk -F'-' '{print \$2}' | sort | uniq -c" "${key}" $log "${key}")
	eval $cmdexec
}

if [[ "$1" == "fw" ]]; then
	for (( i=0; i< ${#line[@]}; i++ )); do
		[[ -z ${line[$i]} ]] && continue

		str=(`echo ${line[$i]} | sed 's/\t+/\n/g'`)
		bmcip=${str[0]}
		bmcpw=${str[1]}
		osipa=${str[2]}

		printf "checking $bmcip\n"
		saarun 'GetFirmwareInventoryInfo'
	done

	printf "\n\n${CYA}      ---- report ----${NCL}\n" 

	stats_on "BMC"
	stats_on "BIOS"
	stats_on "CPLD Motherboard"
	stats_on "CPLD Motherboard 2"
	stats_on "Retimer 1 at UBB"
	stats_on "Retimer 2 at UBB"
	stats_on "Retimer 3 at UBB"
	stats_on "Retimer 4 at UBB"
	stats_on "Retimer 5 at UBB"
	stats_on "Retimer 6 at UBB"
	stats_on "Retimer 7 at UBB"
	stats_on "Retimer 8 at UBB"

	stats_on "UBB_Serdes_Retimer_1"
	stats_on "UBB_Serdes_Retimer_2"
	stats_on "UBB_Serdes_Retimer_3"

	stats_on "UBB_Primary_CPLD"
	stats_on "UBB_Secondary_CPLD"

	stats_on "GPU1 System Slot 1"
	stats_on "GPU2 System Slot 2"
	stats_on "GPU3 System Slot 3"
	stats_on "GPU4 System Slot 4"
	stats_on "GPU5 System Slot 5"
	stats_on "GPU6 System Slot 6"
	stats_on "GPU7 System Slot 7"
	stats_on "GPU8 System Slot 8"

	stats_on "Power Supply 1 PWS-3K02G-2R"
	stats_on "Power Supply 2 PWS-3K02G-2R"
	stats_on "Power Supply 3 PWS-3K02G-2R"
	stats_on "Power Supply 4 PWS-3K02G-2R"
	stats_on "Power Supply 5 PWS-3K02G-2R"
	stats_on "Power Supply 6 PWS-3K02G-2R"
	stats_on "Power Supply 7 PWS-3K02G-2R"
	stats_on "Power Supply 8 PWS-3K02G-2R"

	stats_on "AOC-ATG-i2TM"
	stats_on "MCX623106AC-CDAT"

	stats_on "PLX motherboard"

	printf "${CYA}test done in $SECONDS seconds${NCL}\n"

	exit 0
fi

if [[ "$1" == "power" ]]; then
	for (( i=0; i< ${#line[@]}; i++ )); do
		[[ -z ${line[$i]} ]] && continue

		str=(`echo ${line[$i]} | sed 's/\t+/\n/g'`)
		bmcip=${str[0]}
		bmcpw=${str[1]}
		osipa=${str[2]}

		ipmitool -H $bmcip -U ADMIN -P $bmcpw power status
	done
	exit 0
fi

if [[ "$1" == "ping" ]]; then
	for (( i=0; i< ${#line[@]}; i++ )); do
		[[ -z ${line[$i]} ]] && continue

		str=(`echo ${line[$i]} | sed 's/\t+/\n/g'`)
		bmcip=${str[0]}
		bmcpw=${str[1]}
		osipa=${str[2]}

		STATUS=$(curl -s -k -m 2 -o /dev/null -w "%{http_code}" https://$bmcip)

		if [[ $STATUS == "200" ]]; then
			printf "$bmcip\t${GRN}online${NCL}\n"
		else
			printf "$bmcip\t${RED}offline${NCL}\n"
		fi
	done
	exit 0
fi

for (( i=0; i< ${#line[@]}; i++ )); do
	[[ -z ${line[$i]} ]] && continue

	str=(`echo ${line[$i]} | sed 's/\t+/\n/g'`)
	bmcip=${str[0]}
	bmcpw=${str[1]}
	osipa=${str[2]}

	saarun 'GetBmcInfo'
	saarun 'GetBiosInfo'
	saarun 'GetCpldInfo'
	saarun 'GetGPUInfo'
done

# login remote server to check oam cpld
for (( i=0; i< ${#line[@]}; i++ )); do
	[[ $CHECK_OAM_CPLD -eq 0 ]] && break
	[[ -z ${line[$i]} ]] && continue

	str=(`echo ${line[$i]} | sed 's/\t+/\n/g'`)
	bmcip=${str[0]}
	bmcpw=${str[1]}
	osipa=${str[2]}

	#rsync saa ${osipa}:/usr/local/bin/
	printf "      ---- %-17s %s\n" ${bmcip} ${osipa}
	remote "$oam" | tee -a $log
done

printf "\n\n${BCY}      ---- report ----${NCL}\n" 

printf "${GRN}BMC${NCL}\n" 
grep "BMC version"  $log | sed  -r 's/(version\.+)/-/g' | awk -F'-' '{print $2}' | sort | uniq -c

printf "${GRN}BIOS${NCL}\n" 
grep "BIOS version" $log | sed  -r 's/(version\.+)/-/g' | awk -F'-' '{print $2}' | sort | uniq -c

printf "${GRN}Motherboard CPLD 1${NCL}\n" 
grep "Motherboard CPLD 1" $log | sed  -r 's/(version\.+)/-/g' | awk -F'-' '{print $2}' | sort | uniq -c

printf "${GRN}Motherboard CPLD 2${NCL}\n" 
grep "Motherboard CPLD 2" $log | sed  -r 's/(version\.+)/-/g' | awk -F'-' '{print $2}' | sort | uniq -c

printf "${GRN}UBB cpld-1${NCL}\n" 
grep "UBB_Primary_CPLD" $log | sed  -r 's/(version\.+)/-/g' | awk -F'-' '{print $2}' | sort | uniq -c

for (( i=1; i< 9; i++ )); do
	printf "${GRN}UBB Retimer %s${NCL}\n" ${i}
	grep "Retimer ${i}" $log | sed  -r 's/(version\.+)/-/g' | awk -F'-' '{print $2}' | sort | uniq -c
done

for (( i=1; i< 4; i++ )); do
	printf "${GRN}Serdes Retimer %s${NCL}\n" ${i}
	grep "UBB_Serdes_Retimer_${i}" $log | sed  -r 's/(version\.+)/-/g' | awk -F'-' '{print $2}' | sort | uniq -c
done

if [[ $CHECK_OAM_CPLD -ne 0 ]]; then
	printf "${GRN}OAM SPI${NCL}\n"
	grep SPI  $log | awk '{print $5}' | sort | uniq -c

	printf "${GRN}OAM CPLD${NCL}\n"
	grep 'OAM CPLD' $log | awk '{print $6}' | sort | uniq -c
fi

printf "${CYA}test done in $SECONDS seconds${NCL}\n"
